#define LEFT_SPEED 110
#define RIGHT_SPEED 130
#define ARM_SPEED 150
#define GRABBER_SPEED 150
#define IR_LIMIT 300
//int irSensors[]  = {A0 , A3 , A2 , A1 , A4 };
//int irSensors[]  = {A4 , A1 , A2 , A3 , A0 };
int irSensors[]  = {A2 , A1 , A4 , A3 , A0 };
int irReads[5];
int irControl = 0;

int mr1 = 32;   // motor left  pin 12 -> IN3
int mr2 = 30;   // motor left  pin 13 -> IN4
int pmwr = 13;  // motor left  Pulse Width Modulation -> EN2
//----------------------

int ml1 = 36;  // motor right pin 8 -> IN1
int ml2 = 38; // motor right pin 9 -> IN2
int pmwl = 12; // motor right Pulse Width Modulation -> EN1
// -----------------------
int arm1 = 42;
int arm2 = 8;
int pwmArm = 11;
// -----------------------
int grab1 = 48;
int grab2 = 9;
int pwmGrab = 10;
char bluetoothdata;
int addSpeed ;
bool manual;
bool arm;
void setup()
{
  Serial3.begin(9600);
  Serial.begin(9600);
  manual = true;
  arm = false;
  addSpeed = 0;
}
void loop()
{
  //wheelsControl(LEFT_SPEED, RIGHT_SPEED);

  if (Serial3.available()) {
    bluetoothdata = Serial3.read();
    if (bluetoothdata == 'V') {
      manual = false;
      wheelsControl(0, 0);//stop speed when convert the manwal to auto
    } else if (bluetoothdata == 'v') {
      manual = true;
      wheelsControl(0, 0);
    } if (bluetoothdata == 'U') {
      addSpeed = 50;
    } else if (bluetoothdata == 'u') {
      addSpeed = 0;
    } else if (bluetoothdata == 'X'  && manual) {
      arm = true;
      wheelsControl(0, 0);
    } else if (bluetoothdata == 'x'  && manual) {
      arm = false;
      wheelsControl(0, 0);
    }
    Serial.println(bluetoothdata);
  }
  if (!manual) {
    lineControl();
    //Serial.println("auto");
  } else {
    //Serial.println("manual");
    if (!arm) {
      manualControl(bluetoothdata);
    } else {
      armGrabControl(bluetoothdata);
    }
  }
}
void wheelsControl(int ML , int MR) {
  // MOTOR LEFT CONTROL DIRECTION
  if ( ML < 0 ) {
    digitalWrite(ml1, 0);
    digitalWrite(ml2, 1);
    analogWrite(pmwl, -ML - addSpeed);
  } else {
    digitalWrite(ml1, 1);
    digitalWrite(ml2, 0);
    analogWrite(pmwl, ML + addSpeed);
  }
  // MOTOR RIGHT CONTROL DIRECTION
  if ( MR < 0 ) {
    digitalWrite(mr1, 0);
    digitalWrite(mr2, 1);
    analogWrite(pmwr, -MR - addSpeed);
  } else {
    digitalWrite(mr1, 1);
    digitalWrite(mr2, 0);
    analogWrite(pmwr, MR + addSpeed);
  }
}

void armControl(int s) {
  if (s < 0 ) {
    digitalWrite(arm1, 0);
    digitalWrite(arm2, 1);
    analogWrite(pwmArm, -s);
  } else {
    digitalWrite(arm1, 1);
    digitalWrite(arm2, 0);
    analogWrite(pwmArm, s);
  }
}

void grabControl(int s) {
  if (s < 0) {
    digitalWrite(grab1, 0);
    digitalWrite(grab2, 1);
    analogWrite(pwmGrab, -s);
  } else {
    digitalWrite(grab1, 1);
    digitalWrite(grab2, 0);
    analogWrite(pwmGrab, s);
  }
}
void manualControl(char dataRecived) {
  switch (dataRecived) {
    case 'F':
      // move forward
      wheelsControl(LEFT_SPEED - 20, RIGHT_SPEED -  20);
      break;
    case 'L':
      // move Left
      wheelsControl(-LEFT_SPEED - 30, RIGHT_SPEED + 30);
      break;
    case 'R':
      // move right
      wheelsControl(LEFT_SPEED + 30, - RIGHT_SPEED - 30);
      break;
    case 'B':
      // move backward
      wheelsControl(- LEFT_SPEED, - RIGHT_SPEED);
      break;
    case '0':
      // stop
      wheelsControl(0, 0);
      break;
    case 'S':
      wheelsControl(0, 0);
      break;
    case 'o':
      wheelsControl(0, 0);
      break;
  }
}
void armGrabControl(char dataRecived) {
  switch (dataRecived) {
    case 'F':
      // arm up
      armControl(ARM_SPEED);
      break;
    case 'B':
      // arm down
      armControl(-ARM_SPEED);
      break;
    case 'R':
      // grabber close
      grabControl(GRABBER_SPEED);
      break;
    case 'L':
      // grabber open
      grabControl(- GRABBER_SPEED);
      break;
    case 'S' :
      armControl(0);
      grabControl(0);
      break;
  }
}
void changeMode(char dataRecived) {
  switch (dataRecived) {
    case 'A' :
      manual = false;
      break;
    case 'N' :
      manual = false;
      break;
    case 'M':
      manual = true;
      break;
    case 'C':
      manual = true;
      break;
  }
}
void lineControl() {
  // put your main code here, to run repeatedly:
  readIrSensors();
   printIrSerial();
  convertIrSensors();
  // Serial.println(irControl);
  //forward
  if (irControl == 100) {
    wheelsControl(LEFT_SPEED - 70, RIGHT_SPEED - 70);
  }

  //left carve slow
  else if (irControl == 1000 || irControl == 1100) {
    wheelsControl(.3 * LEFT_SPEED, RIGHT_SPEED);
  }
  //left reverse
  else if (irControl == 10000 || irControl == 11100 || irControl == 11110 || irControl == 1100) {
    wheelsControl(- LEFT_SPEED - 30, RIGHT_SPEED + 30);
  }
  //right carve slow
  else if (irControl == 10 || irControl == 110) {
    wheelsControl(LEFT_SPEED, .2 * RIGHT_SPEED);

  }
  //right reverse
  else if (irControl == 1 || irControl == 111 || irControl == 1111 || irControl == 11) {
    wheelsControl(LEFT_SPEED + 30, - RIGHT_SPEED - 30);
  }
}

void readIrSensors() {
  for (int i = 0 ; i < 5 ; i++) {
    irReads[i] = analogRead(irSensors[i]);
  }
}

void convertIrSensors() {

  for (int i = 0; i < 5; i++) {
    if (i == 0) {
      if (irReads[i] > IR_LIMIT + 300)
        irReads[i] = 1;
      else
        irReads[i] = 0;

    } else {
      if (irReads[i] > IR_LIMIT)
        irReads[i] = 1;
      else
        irReads[i] = 0;
    }
  }
  printIrSerial();
  irControl = irReads[0] * 1 + irReads[1] * 10  + irReads[2] * 100 + irReads[3] * 1000 + irReads[4] * 10000 ;
}

void printIrSerial() {
  for (int i = 0 ; i < 5 ; i++) {
    Serial.print("S");
    Serial.print(i);
    Serial.print(" = ");
    Serial.print(irReads[i]);
    Serial.print(" ");
  }
  Serial.println();
}
